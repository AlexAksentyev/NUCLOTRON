INCLUDE 'bin/setups/16PER/16TILTEDv2';

PROCEDURE DATAOUTPUT MRKR_LAT MRKR WHERE;
    VARIABLE MU 800; VARIABLE NBAR 800 3;
    VARIABLE MAPSE 1; VARIABLE I 1;

    OS 'mkdir -p '&WHERE&'service-data/';
    
    {print transfer map}
    OPENF 636 WHERE&'TrMAP:'&MRKR_LAT&'_'&MRKR 'REPLACE';
      PM 636; CLOSEF 636;
      {prInt spin transfer map}
    OPENF 636 WHERE&'SpTrMAP:'&MRKR_LAT&'_'&MRKR 'REPLACE';
      PSM 636; CLOSEF 636;
      {print aberrations}
    OPENF 636 WHERE&'service-data/ABERRATIONS:'&MRKR_LAT&'_'&MRKR 'REPLACE';
      PA 636; CLOSEF 636;
      {other stats about the map}
      MAPSE := SE(MAP);
    OPENF 636 WHERE&'service-data/MAP-SYM-ERR:'&MRKR_LAT&'_'&MRKR 'REPLACE';
      WRITE 636 MAPSE; CLOSEF 636;
      WRITE 6 'MAP SYMPLECTIFICATION ERROR' MAPSE;
    TSS MU NBAR 0;
    OPENF 636 WHERE&'MU:'&MRKR_LAT&'_'&MRKR&'.da' 'REPLACE';
      WRITE 636 MU; CLOSEF 636;
      LOOP I 1 3; OPENF 636 WHERE&'NBAR'&MRK(I)&':'&MRKR_LAT&'_'&MRKR&'.da' 'REPLACE';
      WRITE 636 NBAR(I); CLOSEF 636; ENDLOOP;

ENDPROCEDURE;

PROCEDURE TILTLAT TILTS_BEND TILTS_WF WHERE MRKR;
  
  {lattice parameters}
  VARIABLE SGX1 1; VARIABLE SGY1 1; {sextupole gradients}
  VARIABLE SGX2 1; VARIABLE SGY2 1;
  VARIABLE EB1 1; {Wien-filter E-field (optimum)}
  VARIABLE NTURN 1; VARIABLE NPDAT 1;
  VARIABLE MRKR_LAT 100;

  WRITE 6 'MARKER:                                                       '&MRKR;

  {WIEN FILTER}
  {spin tune ~ 10^-7}
  EB1 := fWFOPTIMUME(1); {cf. corresponding lattice file}

  {SEXTUPOLES}
    {natural chromaticity}
    SGx1 :=  0.0;
    SGy1  := 0.0;
    SGx2 :=  0.0;
    SGy2  := 0.0;

  
    {beta chromaticity}
    {SGx1 := 0.1991238684213407E-001;
    SGy1 := -.8748935486678192E-001;
    SGx2 := -.5372269072515854E-001;}

    {coherence}
    SGx1 := -.6799259350554631E-002;
    SGy1 := -.4691403605045742E-001;
    SGx2 := 0.6869494176206414E-001;

  OV 3 3 0;
  DAEPS 1E-12; {this sets DA garbage collection tolerance so that}
               {the TRANSFER MAP doesnt get the 1e-15 ABERRATION coefficient}
  { SET lattice parameters }
  SET_FOR_DEUTERONS 1.143914;

                    {CW lattice}

  LATTICE     SGx1 SGy1 SGx2 SGy2 EB1 1 TILTS_BEND TILTS_WF;  MRKR_LAT:= 'CW'; WRITE 6 'LATTICE LENGTH: '&ST(SPOS);
  OPENF 9292 WHERE&'lattice-descriptions/LATTICE-PARAMETERS:'&MRKR_LAT&'_'&MRKR 'REPLACE';
    WRITE 9292 'EB1         SEXT-GX1         SEXT-GY1         SEXT-GX2         SEXT-GY2';
    WRITE 9292 SF(EB1 , '(F15.7)')&SF(SGx1, '(F15.7)')&SF(SGy1, '(F15.7)')&SF(SGx2, '(F15.7)')&SF(SGy2, '(F15.7)');
  CLOSEF 9292;


  DATAOUTPUT MRKR_LAT MRKR WHERE;

                     {CCW lattice}

  CCW_LATTICE SGx1 SGy1 SGx2 SGy2 EB1 1 -TILTS_BEND -TILTS_WF;  MRKR_LAT:= 'CCW';
  OPENF 9292 WHERE&'lattice-descriptions/LATTICE-PARAMETERS:'&MRKR_LAT&'_'&MRKR 'REPLACE';
    WRITE 9292 'EB1         SEXT-GX1         SEXT-GY1         SEXT-GX2         SEXT-GY2';
    WRITE 9292 SF(EB1 , '(F15.7)')&SF(SGx1, '(F15.7)')&SF(SGy1, '(F15.7)')&SF(SGx2, '(F15.7)')&SF(SGy2, '(F15.7)');
  CLOSEF 9292;

  DATAOUTPUT MRKR_LAT MRKR WHERE;

ENDPROCEDURE; {TILTLAT}

PROCEDURE GENERAL_TEST;
  VARIABLE LATNAME 10;    VARIABLE TESTNAME 100;
  VARIABLE OUTDIR 100;    VARIABLE SRCDIR 100;   
  VARIABLE TILTS_BEND 48; VARIABLE TILTS_WF 32;
  VARIABLE I 1;           VARIABLE CASEMRKR 100;

  WRITE 6 '++++++++++++++++++++++++++++++++++++++++++++++++++';
  WRITE 6 '                   GENERAL TEST                   ';
  WRITE 6 '--------------------------------------------------';

  LATNAME := '16PER';
  TESTNAME := 'ideal';
  
  DIRSET OUTDIR 'data/'&LATNAME&'/'&TESTNAME&'/third-order/'; DIRSET_AUTO 1;
  SRCDIR := 'data/'&LATNAME&'/TILTS-source/';
  GROUTF 'img/dump/TR' 1;
  OS 'mkdir -p '&OUTDIR&'lattice-descriptions/';

  I := 0;                                           {control case: no tilting }
  CASEMRKR := 'CASE_'&MRK(I);
  TILTS_BEND := READTILT(SRCDIR&'TILTSb:'&CASEMRKR);
  TILTS_WF := READTILT(SRCDIR&'TILTSwf:'&CASEMRKR);
  TILTLAT TILTS_BEND TILTS_WF OUTDIR CASEMRKR;

IF FALSE;
  LOOP I 1 50;                                      {tilted cases}
    CASEMRKR := 'CASE_'&MRK(I);
    { TILTS_BEND := READTILT(SRCDIR&'TILTSb:'&CASEMRKR); }
    TILTS_WF := READTILT(SRCDIR&'TILTSwf:'&CASEMRKR);
    { TILTS_WF := VEGAUSS(I*1e-6, 1e-4, 32, OUTDIR&'TILTSwf:'&CASEMRKR); }
    TILTLAT TILTS_BEND TILTS_WF OUTDIR CASEMRKR;
  ENDLOOP;
ENDIF;

ENDPROCEDURE; {RUN FOR COMPARISON 8 VS 16 PERIODIC LATTICES}

PROCEDURE FOR_CALIBRATION;
  VARIABLE LATNAME 10;
  VARIABLE OUTDIR 100;    VARIABLE SRCDIR 100;    VARIABLE CASEMRKR 100;
  VARIABLE TILTS_BEND 48; VARIABLE TILTS_WF 16;

  WRITE 6 '++++++++++++++++++++++++++++++++++++++++++++++++++';
  WRITE 6 '                 FOR CALIBRATION                  ';
  WRITE 6 '--------------------------------------------------';

  LATNAME := '8PER';

  DIRSET OUTDIR 'data/'&LATNAME&'/calibration-phase0/tss/3-order-expansion/';
  SRCDIR := 'data/'&LATNAME&'/TILTS-source/';
  CASEMRKR := 'CASE_1';

  TILTS_BEND :=  READTILT(SRCDIR&'TILTSb:CASE_0'); {no tilting @ case_0}
  TILTS_WF := READTILT(SRCDIR&'TILTSwf:'&CASEMRKR);
  
  TILTLAT TILTS_BEND TILTS_WF OUTDIR CASEMRKR;

ENDPROCEDURE; {RUN FOR INVESTIGATION INTO BEAM CALIBRATION}

GENERAL_TEST; END;
